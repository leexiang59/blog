#!/usr/bin/env node   (表明是 node 可执行文件)

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('blog:server') // 引入debug模块，打印调试日志
var http = require('http')
/*
var express = require('express')
var https = require('https')
var fs = require('fs')
var path = require('path')

var httpApp = express()
httpApp.set('port', process.env.PORT || 8080)
httpApp.get('*', function (req, res, next) {
  res.redirect('https://' + req.headers.host + req.path)
})
var httpsOptions = {
  key: fs.readFileSync(path.join('cert', 'cert-1542291032100_www.willli.top.key')),
  cert: fs.readFileSync(path.join('cert', 'cert-1542291032100_www.willli.top.crt'))
}
app.set('port', process.env.PORT || 443)
app.enable('trust proxy')

var server_http = http.createServer(httpApp)
var server_https = https.createServer(httpsOptions, app)
*/

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 8080) // 设置端口号
app.set('port', port)

/**
 * Create HTTP server.
 */

var server_http = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server_http.listen(port)
server_http.on('error', onError)
server_http.on('listening', onListening)

/* server_https.listen(app.get('port'))
server_https.on('error', onError)
server_https.on('listening', onListening) */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server_http.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
